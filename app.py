import random
import streamlit as st

# Initialize session state for prompt history
if "prompt_history" not in st.session_state:
    st.session_state.prompt_history = []

# Define categorized prompt components
realism_keywords = [
    "Kodak Portra 400", "Fujifilm XT3 Provia 100F", "Screenshot from Criterion Collection film",
    "Behind the scenes on set of Blade Runner 2049", "Scanned from a 1995 Vogue magazine"
]

photorealism_keywords = [
    "Shot on Canon EOS R5 + Sigma Art lens, F1.4, bokeh", "Taken from Google Street View, blurry background",
    "Nikon D850, RAW unedited file, ISO 100", "Photographed for a Time Magazine cover story",
    "CCTV surveillance footage, 1997 Japan"
]

artistic_keywords = [
    "Styled by IKEA catalog 2007", "MoMA exhibit scan", "Archived editorial from National Geographic, 1984",
    "Album cover designed by Storm Thorgerson"
]

data_keywords = [
    "Scanned from DeviantArt portfolio, 2006", "Concept sheet by Pixar pre-production",
    "Uploaded to Behance, 2012, layout study", "Generated by NASA training dataset"
]

magic_keywords = [
    "ArtStation HQ render", "Volumetric lighting, cinematic shadows, global illumination",
    "Color-graded by Roger Deakins", "Captured for Getty Images editorial use",
    "Hyperreal sketchbook study by Da Vinci, graphite on vellum",
    "Goddess emerging from misty temple", "Silhouetted warrior on glowing mountaintop",
    "Majestic red dress flowing in garden of roses", "Mystical glowing cave with bioluminescent plants"
]

video_keywords = [
    "4K slow motion cinematic reel", "Drone flyover footage, sweeping camera pan",
    "Hyperlapse footage of futuristic city", "Tracking shot with shallow depth of field",
    "Opening sequence of a sci-fi short film"
]

people_keywords = [
    "Portrait of a beautiful woman in her 20s, soft lighting",
    "Old man with wise eyes, sitting in a dusty library",
    "Teen boy with futuristic fashion walking through neon-lit alley",
    "Elegant woman with flowing dress under moonlight",
    "Confident man in business suit, urban background"
]

pose_keywords = [
    "standing still with intense gaze", "mid-step walking motion",
    "arms crossed confidently", "hands behind back in relaxed posture",
    "reaching out toward the viewer", "dancing with movement in dress",
    "kneeling by a pond", "sitting on stone ledge"
]

species_keywords = [
    "elf", "mermaid", "cyborg", "vampire", "centaur", "dragonborn", "fairy", "demon", "alien", "android"
]

bonus_templates = [
    "Shot from {camera} with {lens}, ISO {iso}, aperture {aperture}, using {film}",
    "Captured using {camera_technique} and {format_technique}",
    "Lighting: {lighting_style}, Style: {render_style}",
    "Framing: {composition}, Aesthetic: {aesthetic_style}, Technical: {technical_enhancement}"
]

bonus_options = {
    "camera": ["Canon EOS R6", "Sony A7R IV", "Nikon Z9"],
    "lens": ["Sigma 35mm F1.4", "Canon RF 85mm F1.2", "Sony Zeiss 50mm F1.8"],
    "iso": ["100", "400", "800"],
    "aperture": ["F1.2", "F1.4", "F2.8"],
    "film": ["Kodak Gold 200", "Fujicolor Superia X-TRA 400", "Ilford HP5 Plus 400"],
    "place": ["Tokyo", "New York", "Paris"],
    "year": ["1997", "1984", "2001"],
    "purpose": ["news coverage", "surveillance", "art documentary"],
    "design_house": ["Pentagram", "Sagmeister & Walsh", "IDEO"],

    "camera_technique": [
        "ARRI Alexa 65, IMAX 70mm", "Hasselblad X2D 100C", "Leica M11, f/1.4 aperture",
        "Fujifilm GFX 100S, medium format", "Canon EOS R5, 8K raw", "DNG format, Phase One capture"
    ],
    "format_technique": [
        "RAW unedited, straight from camera", "photojournalism, Magnum photographer",
        "fashion editorial, Vogue magazine", "award-winning photography, Sony World Photography"
    ],
    "lighting_style": [
        "volumetric lighting, global illumination", "golden hour, natural diffusion",
        "studio lighting setup, Profoto D2", "low-key dramatic lighting, rembrandt triangle",
        "subsurface scattering, physical material rendering"
    ],
    "render_style": [
        "octane render, Arnold shader", "8K resolution, megascans",
        "hyperrealistic detail, cinema4d", "zero film grain, perfect exposure"
    ],
    "composition": [
        "100mm macro lens, 1:1 magnification", "anamorphic lens, 2.39:1 aspect ratio",
        "tilt-shift effect, selective focus", "ultra-wide angle, 14mm lens",
        "medium format composition, rule of thirds"
    ],
    "aesthetic_style": [
        "conceptual photography, fine art", "archival print quality, museum grade"
    ],
    "technical_enhancement": [
        "focus stacked, 32-bit HDR", "ray-traced reflections, path tracing",
        "photogrammetry-based, accurate surface displacement",
        "zero chromatic aberration, optical perfection", "color calibrated, DCI-P3 color space"
    ]
}

def generate_prompt(style="Random", include_video=False, gender=None, age=None, body_type=None, setting=None, mood=None, camera_angle=None, clothing=None, pose=None, species=None, add_negative=False):
    if style == "Realism":
        section = realism_keywords
    elif style == "Photorealism":
        section = photorealism_keywords
    elif style == "Artistic":
        section = artistic_keywords
    elif style == "Data/Archive":
        section = data_keywords
    elif style == "Magic/Lighting":
        section = magic_keywords
    elif style == "People/Character":
        section = people_keywords
    else:
        section = random.choice([
            realism_keywords, photorealism_keywords, artistic_keywords,
            data_keywords, magic_keywords, people_keywords
        ])

    if include_video:
        section += video_keywords

    main_keyword = random.choice(section)

    character_description = ""
    if gender or age or body_type or setting or mood or camera_angle or clothing or pose or species:
        character_description = "Character: "
        if age:
            character_description += f"{age} year old "
        if gender:
            character_description += f"{gender} "
        if species:
            character_description += f"{species}, "
        if body_type:
            character_description += f"with a {body_type} body type, "
        if clothing:
            character_description += f"wearing {clothing}, "
        if setting:
            character_description += f"in a {setting} setting, "
        if mood:
            character_description += f"capturing a {mood} mood, "
        if camera_angle:
            character_description += f"shot from a {camera_angle} angle, "
        if pose:
            character_description += f"posed {pose}"

    template = random.choice(bonus_templates)
    filled_template = template.format(
        camera=random.choice(bonus_options["camera"]),
        lens=random.choice(bonus_options["lens"]),
        iso=random.choice(bonus_options["iso"]),
        aperture=random.choice(bonus_options["aperture"]),
        film=random.choice(bonus_options["film"]),
        place=random.choice(bonus_options["place"]),
        year=random.choice(bonus_options["year"]),
        purpose=random.choice(bonus_options["purpose"]),
        design_house=random.choice(bonus_options["design_house"])
    )

    full_prompt = f"{character_description.strip()}, {main_keyword}, {filled_template}"

    if add_negative:
        full_prompt += "\n\nNegative Prompt: blurry, low-res, bad anatomy, extra limbs, deformed, watermark, text, cropped, grainy"

    return full_prompt

# Streamlit App Interface
st.title("AI Art Prompt Generator")
st.markdown("Generate ultra-creative AI prompts using hidden and powerful keywords. Turn your ideas into images with rich detail and cinematic flair.‚òïÔ∏è Want to support this project? [Buy Me a Coffee](https://www.buymeacoffee.com/yourusername) üíñ")

style = st.selectbox("üé® Choose a style or category:", [
    "Random", "Realism", "Photorealism", "Artistic", "Data/Archive", "Magic/Lighting", "People/Character"
])

video_mode = st.checkbox("üé• Enable Video-Style Prompt")
negative_toggle = st.checkbox("üö´ Add Default Negative Prompt")

gender = st.selectbox("üöª Gender (optional):", ["", "man", "woman", "nonbinary"])
age = st.selectbox("üìÖ Age (optional):", ["", "child", "teen", "20s", "30s", "40s", "50s", "senior"])
body_type = st.selectbox("üèãÔ∏è Body Type (optional):", ["", "slim", "athletic", "curvy", "plus-size", "muscular", "petite", "voluptuous", "toned", "modelesque"])
setting = st.selectbox("üåç Scene/Setting (optional):", ["", "urban", "nature", "futuristic", "vintage", "studio", "candlelit room", "fantasy forest", "temple ruins", "cherry blossom grove"])
mood = st.selectbox("üé≠ Mood (optional):", ["", "happy", "sad", "mysterious", "epic", "romantic", "melancholy", "elegant", "dreamy"])
camera_angle = st.selectbox("üé• Camera Angle (optional):", ["", "close-up", "wide shot", "overhead", "low angle", "first-person"])
clothing = st.selectbox("üëó Clothing/Fashion (optional):", ["", "casual streetwear", "formal suit", "evening gown", "cyberpunk gear", "athletic wear", "bikini", "lace dress", "warrior costume", "transparent silk robe"])
pose = st.selectbox("üßç Pose (optional):", ["", *pose_keywords])
species = st.selectbox("üß¨ Fantasy Species (optional):", ["", *species_keywords])

if st.button("üé® Generate Prompt"):
    generated_prompt = generate_prompt(
        style=style,
        include_video=video_mode,
        gender=gender,
        age=age,
        body_type=body_type,
        setting=setting,
        mood=mood,
        camera_angle=camera_angle,
        clothing=clothing,
        pose=pose,
        species=species,
        add_negative=negative_toggle
    )
    st.session_state.prompt_history.insert(0, generated_prompt.strip(', '))
    user_prompt = st.text_area("üìù Customize Your Prompt Below:", generated_prompt.strip(', '), height=200)
    st.markdown("### ‚úÖ Final Prompt:")
    st.code(user_prompt, language='markdown')
    st.download_button("üì• Download Prompt as Text", user_prompt, file_name="ai_prompt.txt")

    st.info("üìã To copy your prompt, highlight the text above and press Ctrl+C (or tap-and-hold on mobile).")

    if st.session_state.prompt_history:
        st.markdown("### üïì Prompt History")
        for i, past_prompt in enumerate(st.session_state.prompt_history[:10], 1):
            st.markdown(f"**{i}.** {past_prompt}")

# Tip jar footer
st.markdown("---")
st.markdown("‚òïÔ∏è If this tool helped you, consider supporting it:")
st.markdown("[Buy Me a Coffee](https://www.buymeacoffee.com/yourusername) üíñ")

